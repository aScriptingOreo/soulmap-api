# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BundleRequestInput {
  format: String! = "base64"
  tileIndices: [Int!]!
  version: String!
}

type Category {
  categoryName: String!
  createdAt: DateTime!
  hiddenByDefault: Boolean!
  id: ID!
  locations: [Location!]
  path: String
  updatedAt: DateTime!
}

type Changelog {
  changeType: String!
  id: Int!
  modifiedBy: String!
  timestamp: DateTime!
}

input CreateCategoryInput {
  categoryName: String!
  hiddenByDefault: Boolean = false
}

input CreateChangelogInput {
  changeType: String!
  modifiedBy: String!
}

input CreateLocationInput {
  category: String!
  coordinates: JSON
  description: String
  icon: String
  iconColor: String
  iconSize: Float
  locationName: String!
  mediaUrl: String
  noCluster: Boolean! = false
  radius: Float
  versions: [String!]
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type GridRegion {
  endX: Int!
  endY: Int!
  startX: Int!
  startY: Int!
}

type Icon {
  category: String!
  createdAt: DateTime!
  id: ID!
  name: String!
  path: String!
  size: Float
  url: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Location {
  category: Category
  categoryId: String
  coordinates: JSON
  createdAt: DateTime!
  createdBy: String
  description: String
  icon: String
  iconColor: String
  iconSize: Float
  id: ID!
  lastUpdateBy: String
  locationName: String!
  mediaUrl: String
  noCluster: Boolean!
  radius: Float
  updatedAt: DateTime!
  versions: [String!]
}

type MapVersion {
  """Grid size (sqrt of tilecount)"""
  gridSize: Int!
  isLatest: Boolean!

  """Maximum tile index (tilecount - 1)"""
  maxTileIndex: Int!

  """Minimum tile index (always 0)"""
  minTileIndex: Int!
  name: String!
  path: String!
  tilecount: Int!
  version: String!
}

type Mutation {
  createCategory(createCategoryInput: CreateCategoryInput!): Category!
  createChangelogEntry(createChangelogInput: CreateChangelogInput!): Changelog!

  "\n      Create a new location. Examples for coordinates:\n      - Single marker: [37.7749, -122.4194]\n      - Multiple markers: [[37.7749, -122.4194], [40.7128, -74.0060], [34.0522, -118.2437]]\n      Requires API key in x-api-key header.\n    "
  createLocation(createLocationInput: CreateLocationInput!): Location!

  """Refresh the icon index from S3"""
  refreshIconIndex: Boolean!
  removeCategory(id: ID!): Boolean!
  removeLocation(id: ID!): Boolean!
  updateCategory(updateCategoryInput: UpdateCategoryInput!): Category!
  updateLocation(updateLocationInput: UpdateLocationInput!): Location!
}

type Query {
  categories: [Category!]!
  category(id: ID!): Category!

  """Get category with all its locations"""
  categoryWithLocations(id: ID!): Category!
  changelog: [Changelog!]!

  """Get icon by ID"""
  icon(id: String!): Icon

  """Get all icon categories"""
  iconCategories: [String!]!

  """Get all icons from the S3 bucket"""
  icons: [Icon!]!

  """Get icons by category"""
  iconsByCategory(category: String!): [Icon!]!
  latestMapVersion: MapVersion!
  location(id: ID!): Location!
  locations: [Location!]!
  locationsByCategory(categoryId: String!): [Location!]!
  locationsByCategoryAndVersion(categoryId: String!, version: String!): [Location!]!
  locationsByVersion(version: String!): [Location!]!
  locationsGroupedByCategory: [Location!]!
  mapTileBundle(bundleRequest: BundleRequestInput!): TileBundle!
  mapVersion(version: String!): MapVersion
  mapVersions: [MapVersion!]!
  recentChanges(limit: Int!): [Changelog!]!

  """Search icons by name, category, or path"""
  searchIcons(query: String!): [Icon!]!
  tileFilesFromS3(version: String!): [S3TileFile!]!
  usedMapVersions: [String!]!
}

type S3TileFile {
  filename: String!
  index: Int!
  lastModified: DateTime!
  size: Int!
  url: String!
}

type TileBundle {
  bundleId: String!
  createdAt: DateTime!
  tiles: [TileBundleItem!]!
  totalSize: Int!
  version: String!
}

type TileBundleItem {
  data: String!
  index: Int!
  size: Int!
}

type TileCoordinate {
  index: Int!
  version: String!
  x: Int!
  y: Int!
}

input UpdateCategoryInput {
  categoryName: String
  hiddenByDefault: Boolean
  id: ID!
}

input UpdateLocationInput {
  category: String
  coordinates: JSON
  description: String
  icon: String
  iconColor: String
  iconSize: Float
  id: ID!
  locationName: String
  mediaUrl: String
  noCluster: Boolean
  radius: Float
  versions: [String!]
}