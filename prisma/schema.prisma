generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Location {
  id              String   @id @default(uuid())
  name            String
  coordinates     Json     // Stores either [number, number] or array of coordinates
  description     String
  type            String   // Category (previously subdirectory)
  icon            String?
  iconSize        Float?
  mediaUrl        Json?    // Can be a string or array of strings
  iconColor       String?
  radius          Float?
  lastModified    DateTime @default(now())
  isCoordinateSearch Boolean? @default(false)
  lore            String?  @db.Text
  spoilers        String?  @db.Text
  noCluster       Boolean? @default(false)
  exactCoordinates Json?   // Removed underscore prefix
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  submittedBy     String?  // Discord user ID who submitted this location
  approvedBy      String?  // Discord user ID of admin who approved the location
}

// Heatmap Data Points
model HeatmapDatapoint {
  id           Int                      @id @default(autoincrement())
  lat          Json                     // Stores latitude and longitude as a JSON object
  intensity    Float                    @default(0.75)
  weight       Int
  radius       Int                      @default(25)
  timestamp    DateTime                 @default(now())
  lastModified DateTime                 @default(now()) @updatedAt
  visible      Boolean                  @default(true)
  types        HeatmapDatapointType[]   // Relation to types through the junction table
}

// Heatmap Types
model HeatmapType {
  id            Int                     @id @default(autoincrement())
  name          String                  @unique
  intensity     Float?
  colorBindings Json?                   // Stores color bindings as a JSON object
  datapoints    HeatmapDatapointType[]  // Relation to datapoints through the junction table
}

// Junction table for many-to-many relationship
model HeatmapDatapointType {
  datapoint    HeatmapDatapoint @relation(fields: [datapointId], references: [id], onDelete: Cascade)
  datapointId  Int
  type         HeatmapType      @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId       Int

  @@id([datapointId, typeId])
  @@index([datapointId])
  @@index([typeId])
}
